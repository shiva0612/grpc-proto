// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: user_service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	user "shiva/type-driven/models/user"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserApiClient is the client API for UserApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserApiClient interface {
	// unary
	AddUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*user.StringResponse, error)
	// client streaming
	AddUsers(ctx context.Context, opts ...grpc.CallOption) (UserApi_AddUsersClient, error)
	// server streaming
	ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserApi_ListUsersClient, error)
	// bi-streaming
	ListTheseUsers(ctx context.Context, opts ...grpc.CallOption) (UserApi_ListTheseUsersClient, error)
}

type userApiClient struct {
	cc grpc.ClientConnInterface
}

func NewUserApiClient(cc grpc.ClientConnInterface) UserApiClient {
	return &userApiClient{cc}
}

func (c *userApiClient) AddUser(ctx context.Context, in *user.User, opts ...grpc.CallOption) (*user.StringResponse, error) {
	out := new(user.StringResponse)
	err := c.cc.Invoke(ctx, "/user.UserApi/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userApiClient) AddUsers(ctx context.Context, opts ...grpc.CallOption) (UserApi_AddUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserApi_ServiceDesc.Streams[0], "/user.UserApi/AddUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userApiAddUsersClient{stream}
	return x, nil
}

type UserApi_AddUsersClient interface {
	Send(*user.User) error
	CloseAndRecv() (*user.StringResponse, error)
	grpc.ClientStream
}

type userApiAddUsersClient struct {
	grpc.ClientStream
}

func (x *userApiAddUsersClient) Send(m *user.User) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userApiAddUsersClient) CloseAndRecv() (*user.StringResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(user.StringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userApiClient) ListUsers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (UserApi_ListUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserApi_ServiceDesc.Streams[1], "/user.UserApi/ListUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userApiListUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserApi_ListUsersClient interface {
	Recv() (*user.User, error)
	grpc.ClientStream
}

type userApiListUsersClient struct {
	grpc.ClientStream
}

func (x *userApiListUsersClient) Recv() (*user.User, error) {
	m := new(user.User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userApiClient) ListTheseUsers(ctx context.Context, opts ...grpc.CallOption) (UserApi_ListTheseUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserApi_ServiceDesc.Streams[2], "/user.UserApi/ListTheseUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userApiListTheseUsersClient{stream}
	return x, nil
}

type UserApi_ListTheseUsersClient interface {
	Send(*user.StringRequest) error
	Recv() (*user.User, error)
	grpc.ClientStream
}

type userApiListTheseUsersClient struct {
	grpc.ClientStream
}

func (x *userApiListTheseUsersClient) Send(m *user.StringRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userApiListTheseUsersClient) Recv() (*user.User, error) {
	m := new(user.User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserApiServer is the server API for UserApi service.
// All implementations must embed UnimplementedUserApiServer
// for forward compatibility
type UserApiServer interface {
	// unary
	AddUser(context.Context, *user.User) (*user.StringResponse, error)
	// client streaming
	AddUsers(UserApi_AddUsersServer) error
	// server streaming
	ListUsers(*emptypb.Empty, UserApi_ListUsersServer) error
	// bi-streaming
	ListTheseUsers(UserApi_ListTheseUsersServer) error
	mustEmbedUnimplementedUserApiServer()
}

// UnimplementedUserApiServer must be embedded to have forward compatible implementations.
type UnimplementedUserApiServer struct {
}

func (UnimplementedUserApiServer) AddUser(context.Context, *user.User) (*user.StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUserApiServer) AddUsers(UserApi_AddUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method AddUsers not implemented")
}
func (UnimplementedUserApiServer) ListUsers(*emptypb.Empty, UserApi_ListUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserApiServer) ListTheseUsers(UserApi_ListTheseUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTheseUsers not implemented")
}
func (UnimplementedUserApiServer) mustEmbedUnimplementedUserApiServer() {}

// UnsafeUserApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserApiServer will
// result in compilation errors.
type UnsafeUserApiServer interface {
	mustEmbedUnimplementedUserApiServer()
}

func RegisterUserApiServer(s grpc.ServiceRegistrar, srv UserApiServer) {
	s.RegisterService(&UserApi_ServiceDesc, srv)
}

func _UserApi_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(user.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserApiServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserApi/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserApiServer).AddUser(ctx, req.(*user.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserApi_AddUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserApiServer).AddUsers(&userApiAddUsersServer{stream})
}

type UserApi_AddUsersServer interface {
	SendAndClose(*user.StringResponse) error
	Recv() (*user.User, error)
	grpc.ServerStream
}

type userApiAddUsersServer struct {
	grpc.ServerStream
}

func (x *userApiAddUsersServer) SendAndClose(m *user.StringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userApiAddUsersServer) Recv() (*user.User, error) {
	m := new(user.User)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserApi_ListUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserApiServer).ListUsers(m, &userApiListUsersServer{stream})
}

type UserApi_ListUsersServer interface {
	Send(*user.User) error
	grpc.ServerStream
}

type userApiListUsersServer struct {
	grpc.ServerStream
}

func (x *userApiListUsersServer) Send(m *user.User) error {
	return x.ServerStream.SendMsg(m)
}

func _UserApi_ListTheseUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserApiServer).ListTheseUsers(&userApiListTheseUsersServer{stream})
}

type UserApi_ListTheseUsersServer interface {
	Send(*user.User) error
	Recv() (*user.StringRequest, error)
	grpc.ServerStream
}

type userApiListTheseUsersServer struct {
	grpc.ServerStream
}

func (x *userApiListTheseUsersServer) Send(m *user.User) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userApiListTheseUsersServer) Recv() (*user.StringRequest, error) {
	m := new(user.StringRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserApi_ServiceDesc is the grpc.ServiceDesc for UserApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserApi",
	HandlerType: (*UserApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _UserApi_AddUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddUsers",
			Handler:       _UserApi_AddUsers_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListUsers",
			Handler:       _UserApi_ListUsers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTheseUsers",
			Handler:       _UserApi_ListTheseUsers_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user_service.proto",
}
